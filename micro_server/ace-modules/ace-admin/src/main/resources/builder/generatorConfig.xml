<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--<properties resource="dev.properties"/>-->

    <!--
    defaultModelType ： 可以不填，默认值 conditional，flat表示一张表对应一个po
    targetRuntime ：可以不填，默认值 MyBatis3，常用的还有 MyBatis3Simple，
                    这个配置会影响生成的 dao 和 mapper.xml的内容

                    MyBatis3Simple，生成的 dao 和 mapper.xml 如下，接口会少很多，只包含最最常用的
    -->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <property name="mergeable" value="false"></property>
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
        </plugin>

        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://192.168.8.166:3306/agriculture?useUnicode=true&amp;characterEncoding=UTF8"
                        userId="root"
                        password="123456">
            <!--MySQL 不支持 schema 或者 catalog 所以需要添加这个-->
            <!--用的 mysql-connector-java 版本是 8.0.17,如果配置这一项，会找不到对应的数据库-->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>
        <!--配置 po 生成的包路径和项目路径-->
        <javaModelGenerator targetPackage="${targetModelPackage}" targetProject="${targetJavaProject}"/>
        <!--配置 Mapper.xml 文件的生成目录-->
        <sqlMapGenerator targetPackage="${targetXMLPackage}" targetProject="${targetResourcesProject}"/>
        <!--配置 XxxMapper.java 文件的生成目录-->
        <javaClientGenerator targetPackage="${targetMapperPackage}" targetProject="${targetJavaProject}"
                             type="XMLMAPPER"/>
        <!--type="XMLMAPPER" 会将接口的实现放在 mapper.xml中，
        也推荐这样配置。也可以设置 type 为其他值，比如 type="ANNOTATEDMAPPER"，接口的实现通过注解写在接口上面-->

        <!--
             tableName为对应的数据库表名
             domainObjectName 是要生成的实体类名(可以不指定)
             enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询
        -->

        <!--<table tableName="base_user" domainObjectName="User" >-->
        <!--<generatedKey column="id" identity="false" sqlStatement="myql"/>-->
        <!--</table>-->

        <!--<table tableName="base_menu" domainObjectName="Menu" >-->
        <!--<generatedKey column="id" identity="false" sqlStatement="myql"/>-->
        <!--</table>-->

        <!--<table tableName="base_group" domainObjectName="Group" >
            &lt;!&ndash;<generatedKey column="id" identity="true"/>&ndash;&gt;
        </table>
        <table tableName="base_group_type" domainObjectName="GroupType" >
        </table>-->
        <!--<table tableName="base_resource_authority" domainObjectName="ResourceAuthority" >
        </table>-->
        <!--<table tableName="base_element" domainObjectName="Element">-->
        <!--</table>-->
        <!--<table tableName="gate_client" domainObjectName="GateClient">-->
        <!--</table>
        <table tableName="gate_client_service" domainObjectName="ClientService"/>-->
        <table  tableName="gate_log" domainObjectName="GateLog"/>
    </context>
</generatorConfiguration>
